{"version":3,"sources":["webpack:///./src/components/pagination.js","webpack:///./src/templates/blog.js"],"names":["Pagination","currentPage","numPages","isFirst","isLast","url","window","location","pathname","replace","currentLocation","substring","lastIndexOf","prevPage","nextPage","role","aria-label","className","to","rel","Array","from","length","_","i","key","BlogIndex","data","pageContext","siteTitle","site","siteMetadata","title","posts","nodes","categories","group","tag","h1Title","toUpperCase","map","post","frontmatter","fields","slug","thumbnail","childImageSharp","fluid","itemScope","itemProp","category","tags","date","dangerouslySetInnerHTML","__html","description","excerpt"],"mappings":"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","file":"component---src-templates-blog-js-1eef97cbbc05916476a8.js","sourcesContent":["import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport \"./pagination.scss\"\r\n\r\nconst Pagination = ({currentPage, numPages}) => {\r\n    const isFirst = currentPage === 1\r\n    const isLast = currentPage === numPages\r\n    const url = window.location.pathname.replace(/\\/$/, '') // url without last slash if there is one\r\n    const currentLocation = currentPage === 1 ? url : url.substring(0, url.lastIndexOf(\"/\") + 1).replace(/\\/$/, '') // url without last element without last slash\r\n    const prevPage = currentPage - 1 === 1 ? currentLocation+'/' : currentLocation+'/'+(currentPage - 1)\r\n    const nextPage = currentLocation+'/'+(currentPage + 1)\r\n\r\n    if(numPages >= 8) {\r\n        return (\r\n            <nav role=\"navigation\" aria-label=\"Pagination Navigation\" className=\"pagination-nav\">\r\n                <ul className=\"items\">\r\n                    {!isFirst && (\r\n                        <li><Link to={prevPage} rel=\"prev\" className=\"big-button\">&lt; précédent</Link></li>\r\n                    )}\r\n\r\n                    {currentPage >= 3 && ( \r\n                        <li><Link to={currentLocation} >1</Link></li>\r\n                    )}\r\n                    {currentPage >= 4 && ( <span>...</span> )}\r\n\r\n                    {isFirst && ( <>\r\n                        <li><Link to={`${currentLocation}/1`} className=\"current\">1</Link></li>\r\n                        <li><Link to={`${currentLocation}/2`} >2</Link></li>\r\n                        <li><Link to={`${currentLocation}/3`} >3</Link></li>\r\n                    </> )}\r\n                    {!isFirst && !isLast && ( <>\r\n                        <li><Link to={`${currentLocation}/${currentPage-1}`} >{currentPage-1}</Link></li>\r\n                        <li><Link to={`${currentLocation}/${currentPage}`} className=\"current\">{currentPage}</Link></li>\r\n                        <li><Link to={`${currentLocation}/${currentPage+1}`} >{currentPage+1}</Link></li>\r\n                    </> )}\r\n                    {isLast && ( <>\r\n                        <li><Link to={`${currentLocation}/${numPages-2}`} >{numPages-2}</Link></li>\r\n                        <li><Link to={`${currentLocation}/${numPages-1}`} >{numPages-1}</Link></li>\r\n                        <li><Link to={`${currentLocation}/${numPages}`} className=\"current\">{numPages}</Link></li>\r\n                    </> )}\r\n\r\n                    {currentPage <= (numPages-3) && ( <span>...</span> )}\r\n                    {currentPage <= (numPages-2) && ( \r\n                        <li><Link to={`${currentLocation}/${numPages}`} >{numPages}</Link></li>\r\n                    )}\r\n\r\n                    {!isLast && (\r\n                        <li><Link to={nextPage} rel=\"next\" className=\"big-button\">suivant &gt;</Link></li>\r\n                    )}\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <nav role=\"navigation\" aria-label=\"Pagination Navigation\" className=\"pagination-nav\">\r\n                <ul className=\"items\">\r\n                    {!isFirst && (\r\n                        <li><Link to={prevPage} rel=\"prev\" className=\"big-button\">&lt; précédent</Link></li>\r\n                    )}\r\n\r\n                    {Array.from({ length: numPages }, (_, i) => (\r\n                        <li>\r\n                            <Link key={`pagination-number${i + 1}`} to={`${currentLocation}/${i === 0 ? \"\" : i + 1}`} className={(currentPage === i+1) ? \"current\" : \"\"}>\r\n                                {i + 1}\r\n                            </Link>\r\n                        </li>\r\n                    ))}\r\n\r\n                    {!isLast && (\r\n                        <li><Link to={nextPage} rel=\"next\" className=\"big-button\">suivant &gt;</Link></li>\r\n                    )}\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Pagination","import React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport Category from \"../components/category\"\r\nimport Pagination from \"../components/pagination\"\r\nimport SEO from \"../components/seo\"\r\nimport Image from \"gatsby-image\"\r\n\r\nimport \"./blog.scss\"\r\n\r\nconst BlogIndex = ({ data, location, pageContext }) => {\r\n  const siteTitle = data.site.siteMetadata?.title || `Title`\r\n  const posts = data.posts.nodes\r\n  const categories = data.categories.group\r\n  const { tag, currentPage, numPages } = pageContext\r\n  const h1Title = (tag.length <= 1) ? tag[0] : \"Tous les articles\"\r\n\r\n  if (posts.length === 0) {\r\n    return (\r\n      <Layout location={location}>\r\n        <SEO title=\"All posts\" />\r\n        <p>\r\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\r\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\r\n          gatsby-config.js).\r\n        </p>\r\n      </Layout>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <SEO title=\"All posts\" />\r\n      <h1>{h1Title.toUpperCase()}</h1>\r\n      <section className=\"main-content\">\r\n        <div className=\"articles\">\r\n          <ol className=\"list\">\r\n            {posts.map(post => {\r\n              const title = post.frontmatter.title || post.fields.slug\r\n              const thumbnail = post.frontmatter.thumbnail.childImageSharp.fluid\r\n\r\n              return (\r\n                <li className=\"item\" key={post.fields.slug}>\r\n                  <article className=\"article\" itemScope >\r\n                    <Link to={post.fields.slug} itemProp=\"url\">\r\n                      <Image className=\"thumbnail\" fluid={thumbnail} />\r\n                      <h3 className=\"title\">{title}</h3>\r\n                    </Link>\r\n                    <div className=\"infos-wrapper\">\r\n                      <Category category={post.frontmatter.tags[0]}></Category>\r\n                      <div className=\"date\">&nbsp;-&nbsp;&nbsp;{post.frontmatter.date}</div>\r\n                    </div>\r\n                    <p className=\"description\"\r\n                      dangerouslySetInnerHTML={{\r\n                        __html: post.frontmatter.description || post.excerpt,\r\n                      }}\r\n                      itemProp=\"description\"\r\n                    />\r\n                  </article>\r\n                </li>\r\n              )\r\n            })}\r\n          </ol>\r\n          \r\n          <Pagination currentPage={currentPage} numPages={numPages}></Pagination>\r\n\r\n        </div>\r\n        <aside className=\"side-content\">\r\n            <div className=\"categories-wrapper\">\r\n              <h2 className=\"title\">CATÉGORIES</h2>\r\n              <ul className=\"category-list\">\r\n                {categories.map(category => {\r\n\r\n                  return (\r\n                    <li className=\"item\" key={category.tag}>\r\n                      <Category category={category.tag}></Category>\r\n                    </li>\r\n                  )\r\n                })}\r\n                <li className=\"item\">\r\n                  <Link to=\"/\" className=\"category-wrapper\" itemProp=\"url\">\r\n                      <div className=\"category\">Tous&nbsp;</div>\r\n                      <div className=\"all bullet\"></div>\r\n                  </Link>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n        </aside>\r\n      </section>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogIndex\r\n\r\nexport const pageQuery = graphql`\r\n  query ($tag: [String], $skip: Int!, $limit: Int!){\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    posts: allMarkdownRemark(\r\n            sort: { fields: [frontmatter___date], order: DESC }\r\n            filter: { frontmatter: { tags: { in: $tag } } }\r\n            limit: $limit\r\n            skip: $skip\r\n        ) {\r\n      nodes {\r\n        excerpt\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          date(formatString: \"DD MMMM YYYY\", locale: \"fr\")\r\n          title\r\n          description\r\n          tags\r\n          thumbnail {\r\n            childImageSharp {\r\n              fluid(maxWidth: 400, quality: 90) {\r\n                ...GatsbyImageSharpFluid\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    categories: allMarkdownRemark {\r\n      group(field: frontmatter___tags) {\r\n        tag: fieldValue\r\n        totalCount\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}